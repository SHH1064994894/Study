package com.example.test;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.Date;

import android.app.Activity;
import android.graphics.Bitmap;
import android.hardware.Camera;
import android.hardware.Camera.CameraInfo;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.os.SystemClock;
import android.util.Log;
import android.widget.Toast;

public class MainActivity extends Activity {

	private String TAG = "SHH";

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		handler.sendEmptyMessageDelayed(1, 3000);

	}

	Handler handler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			super.handleMessage(msg);
			switch (msg.what) {
			case 1:
				boolean hasBackCamera = hasBackFacingCamera();
				if (hasBackCamera) {
					saveBitmap(ScreenUtils.snapShotWithoutStatusBar(MainActivity.this));
				}
				Toast.makeText(MainActivity.this, "hasBackCamera=" + hasBackCamera, Toast.LENGTH_LONG).show();
				handler.sendEmptyMessageDelayed(1, 3000);
				break;
			default:
				CameraInfo info = CameraHolder.instance().getCameraInfo()[0];

				if (info.facing == CameraInfo.CAMERA_FACING_FRONT) {

				}
				break;
			}
		}
	};

	public void saveBitmap(Bitmap bm) {
		Log.e(TAG, "保存图片");
		if (SDCardUtils.isSDCardEnable()) {

		}
		File f = new File(SDCardUtils.getSDCardPath(),
				new String("" + new Date(SystemClock.currentThreadTimeMillis())));
		if (f.exists()) {
			f.delete();
		}
		try {
			FileOutputStream out = new FileOutputStream(f);
			bm.compress(Bitmap.CompressFormat.PNG, 90, out);
			out.flush();
			out.close();
			Log.i(TAG, "已经保存");
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}

	}

	private static boolean checkCameraFacing(final int facing) {
		// if (getSdkVersion() < Build.VERSION_CODES.GINGERBREAD) {
		// return false;
		// }
		final int cameraCount = Camera.getNumberOfCameras();
		CameraInfo info = new CameraInfo();
		for (int i = 0; i < cameraCount; i++) {
			Camera.getCameraInfo(i, info);
			if (facing == info.facing) {
				return true;
			}
		}
		return false;
	}

	public static boolean hasBackFacingCamera() {
		final int CAMERA_FACING_BACK = 0;
		return checkCameraFacing(CAMERA_FACING_BACK);
	}

	public static boolean hasFrontFacingCamera() {
		final int CAMERA_FACING_BACK = 1;
		return checkCameraFacing(CAMERA_FACING_BACK);
	}
}
